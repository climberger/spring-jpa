##### Spring data source config
spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=sa
spring.datasource.password=
#spring.datasource.url=jdbc:h2:file:./data/database2
spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.url=jdbc:mysql://localhost:3306/myDb?createDatabaseIfNotExist=true

#This controls usage of schema.sql and data.sql
spring.datasource.initialization-mode=never


##### H2 database config
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.h2.console.settings.trace=false
#spring.h2.console.settings.web-allow-others=false


##### JPA config
spring.jpa.generate-ddl=true
# set to 'none' when using schema.sql
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


##### Direct Hibernate config
logging.level.org.hibernate.stat=debug
logging.level.org.hibernate.type=trace

#The standard Hibernate property values are: create, update, create-drop, validate and none:
#
#create – Hibernate first drops existing tables, then creates new tables
#update – the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
#create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
#validate – Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
#none – this value effectively turns off the DDL generation
#use none, when providing a schema.sql file